// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import {AggregatorV3Interface} from
  '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';

contract Constants {
  address internal constant MOCK_STAKING_V01 = address(1000);
  uint256 internal constant TEST_START_TIME = 1;

  // Pool Limits
  uint96 internal constant COMMUNITY_MAX_POOL_SIZE = 20_000_000 ether;
  uint96 internal constant COMMUNITY_MAX_PRINCIPAL = 10_000 ether;
  uint96 internal constant COMMUNITY_MIN_PRINCIPAL = 1 ether;
  uint96 internal constant OPERATOR_MAX_POOL_SIZE = 5_000_000 ether;
  uint96 internal constant OPERATOR_MAX_PRINCIPAL = 50_000 ether;
  uint96 internal constant OPERATOR_MIN_PRINCIPAL = 5_000 ether;

  // Pool Limits
  uint96 internal constant INITIAL_MAX_COMMUNITY_STAKER_POOL_SIZE = 20_000_000 ether;
  uint96 internal constant INITIAL_MAX_OPERATOR_POOL_SIZE = 5_000_000 ether;

  uint256 internal constant DECIMALS = 10 ** 18;
  uint256 internal constant REWARD_AMOUNT = 2_000_000 ether; // 2M LINK
  uint256 internal constant EMISSION_RATE = 0.01 ether; // 0.01 LINK / sec
  uint256 internal constant STAKE_AMOUNT = 1000 ether; // 1000 LINK
  uint32 internal constant DELEGATION_RATE_DENOMINATOR = 20; // 5%
  uint96 internal constant INITIAL_MIN_OPERATOR_STAKE = 1_000 ether;
  uint96 internal constant INITIAL_MAX_OPERATOR_STAKE = 50_000 ether;
  uint96 internal constant INITIAL_MIN_COMMUNITY_STAKE = 1 ether;
  uint96 internal constant INITIAL_MAX_COMMUNITY_STAKE = 7_000 ether;
  uint256 internal constant MIN_INITIAL_OPERATOR_COUNT = 31;
  uint32 internal constant UNBONDING_PERIOD = 30 days;
  uint32 internal constant INITIAL_UNBONDING_PERIOD = 30 days;
  uint32 internal constant MIN_UNBONDING_PERIOD = 1;
  uint32 internal constant MAX_UNBONDING_PERIOD = 60 days;
  uint32 internal constant CLAIM_PERIOD = 30 days;
  uint32 internal constant INITIAL_CLAIM_PERIOD = 30 days;
  uint32 internal constant MIN_CLAIM_PERIOD = 1 days;
  uint32 internal constant MAX_CLAIM_PERIOD = 30 days;
  uint256 internal constant INITIAL_ALERTING_BUCKET_BALANCE = 10_000 ether;
  uint32 internal constant INITIAL_MULTIPLIER_DURATION = 10 weeks;
  uint256 internal constant MAX_MULTIPLIER = 10 ** 18;
  uint48 internal constant ADMIN_ROLE_TRANSFER_DELAY = 0;

  address internal constant OWNER = address(123456789);
  address internal constant NEW_OWNER = address(333333333);
  address internal constant STRANGER = address(999999999);
  AggregatorV3Interface internal constant FEED = AggregatorV3Interface(address(111111111));
  AggregatorV3Interface internal constant FEED2 = AggregatorV3Interface(address(222222222));

  address internal constant COMMUNITY_STAKER_ONE = address(1);
  address internal constant COMMUNITY_STAKER_TWO = address(2);

  address internal constant OPERATOR_STAKER_ONE = address(4);
  address internal constant OPERATOR_STAKER_TWO = address(5);
  address internal constant OPERATOR_STAKER_THREE = address(6);

  address internal constant PUBLIC_COMMUNITY_STAKER = address(3);

  address internal constant REWARDER = address(9);
  address internal constant PAUSER = address(10);

  uint32 internal constant PRIORITY_PERIOD_THRESHOLD_SECONDS = 3 hours; // 3 hours
  uint32 internal constant PRIORITY_ROUND_THRESHOLD_SECONDS = 20 minutes; // 20 minutes
  uint32 internal constant REGULAR_PERIOD_THRESHOLD_SECONDS =
    PRIORITY_PERIOD_THRESHOLD_SECONDS + PRIORITY_ROUND_THRESHOLD_SECONDS;
  uint96 internal constant FEED_SLASHABLE_AMOUNT = 5_000 ether;
  uint96 internal constant ALERTER_REWARD_AMOUNT = 100 ether;
  uint96 internal constant SLASH_REFILL_RATE = 0.01 ether; // 0.01 LINK / sec
  uint96 internal constant SLASH_MAX_AMOUNT = FEED_SLASHABLE_AMOUNT * 3;
  uint80 internal constant ROUND_ID = 1;

  // Generated by an offchain script with addresses:
  // keccak256(address(1)) and keccak256(address(2)) as leaves
  // in that order.
  bytes32 internal constant MERKLE_ROOT =
    0xe685571b7e25a4a0391fb8daa09dc8d3fbb3382504525f89a2334fbbf8f8e92c;

  bytes internal constant DUMMY_BYTES = bytes('foo');
}
